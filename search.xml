<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[高精度斐波拉契数列]]></title>
      <url>/2020/03/06/%E9%AB%98%E7%B2%BE%E5%BA%A6%E6%96%90%E6%B3%A2%E6%8B%89%E5%A5%91%E6%95%B0%E5%88%97/</url>
      <content type="html"><![CDATA[<p>题目：洛谷P1255 数楼梯<br><br>楼梯有N阶，上楼可以一步上一阶，也可以一步上二阶。<br><br>编一个程序，计算共有多少种不同的走法。<br><br>输入格式：一个数字，楼梯数。<br><br>输出格式：走的方式几种。<br><br>输入<br>4<br><br>输出<br>5<br><br>说明/提示<br>60% N&lt;=50<br>100% N&lt;=5000)<br><br>思路：数楼梯问题其实就是斐波拉契数列的问题，一开始用int类型递推，对了40分，然后改用<br>longlong，对了50分。此后便意识到应该是一个高精度问题。<br><br>重点：<br>1：和普通的高精度加法不同，由于斐波拉契有初始值，即 第一项为1，第二项为2。故我们<br>将这2个数分别存入数组当中，就替代了高精度加法的存入一步。<br><br>2:计算过程中，由于两个数会越来越大，所以位数应该随之改变，才能每一次计算刚好将每一位都算完，而位数增加一位的条件应是此时是最高位且最高位的两数相加大于9，<br>需要进位时才让位数加1。<br><br>3:最后需要逆序输出，和高精度算法一致。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">///数据规模太大，longlong也不够，要使用高精度加法模板</span><br><span class="line">int a[5010]=&#123;0&#125;;</span><br><span class="line">int b[5010]=&#123;0&#125;;</span><br><span class="line">int c[5010]=&#123;0&#125;;</span><br><span class="line">int weishu=1;</span><br><span class="line">void fun(int n)</span><br><span class="line">&#123;</span><br><span class="line">    a[0]=1;</span><br><span class="line">    b[0]=2;</span><br><span class="line">    for(int j=3;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">    for(int i=0;i&lt;weishu;i++)&#123;</span><br><span class="line">        c[i]=c[i]+a[i]+b[i];</span><br><span class="line">        if(c[i]&gt;=10)&#123;</span><br><span class="line">                c[i+1]+=(c[i]/10);</span><br><span class="line">                c[i]%=10;</span><br><span class="line">                if(i==weishu-1)weishu++;///只有在i在最高位时位数需要加1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i=0;i&lt;weishu;i++)a[i]=b[i];</span><br><span class="line">    for(int i=0;i&lt;weishu;i++)b[i]=c[i];</span><br><span class="line">    if(j!=n) memset(c,0,sizeof(c));//每一次算完后让c数组清0以遍下次运算最后一次除外</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    if(n&lt;3)cout&lt;&lt;n;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        fun(n);</span><br><span class="line">        while(c[weishu]==0)weishu--;</span><br><span class="line">        //cout&lt;&lt;weishu&lt;&lt;endl;</span><br><span class="line">        for(int i=weishu;i&gt;=0;i--)</span><br><span class="line">            cout&lt;&lt;c[i];</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 高精度 递推 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[归并排序的应用]]></title>
      <url>/2020/03/05/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[排列与组合]]></title>
      <url>/2020/02/26/%E6%8E%92%E5%88%97%E4%B8%8E%E7%BB%84%E5%90%88/</url>
      <content type="html"><![CDATA[<p>排列与组合是许多模拟题的中心思想，此文就讲解一下两者的实现。</p>
<h3 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h3><p>设有a,b,c三个数，将其排列。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr[0]=a;arr[1]=b;arr[2]=c;</span><br><span class="line">for(int i=0;i&lt;3;i++)</span><br><span class="line">   for(int j=0;j&lt;3;j++)</span><br><span class="line">   &#123;</span><br><span class="line">     if(arr[i]!=arr[j])</span><br><span class="line">         for(k=0;k&lt;3;k++)</span><br><span class="line">         &#123;</span><br><span class="line">             if(arr[i]!=arr[k]&amp;&amp;arr[j]!=arr[k])</span><br><span class="line">             sum++;    </span><br><span class="line">         &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>设有a,b,c三个数，将其组合。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr[0]=a;arr[1]=b;arr[2]=c;</span><br><span class="line">for(int i=0;i&lt;3;i++)</span><br><span class="line">  for(int j=j;j&lt;3;j++)</span><br><span class="line">       for(k=j;k&lt;3;k++)</span><br><span class="line">       &#123;</span><br><span class="line">           if(arr[i]!=arr[k]&amp;&amp;arr[j]!=arr[k])</span><br><span class="line">           sum++;    </span><br><span class="line">       &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>其中，组合与排列还可以是从N个数中选择M个进行排列与组合，则每次循环中循环变量（如i，j，k）的范围是0到N，而循环的层数由M控制，M等于几就有几层循环。 </p>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[大数加法]]></title>
      <url>/2020/02/26/%E5%A4%A7%E6%95%B0%E5%8A%A0%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>题目描述：求两个不超过200位的非负整数的和。</p>
<p>输入：有两行，每行是一个不超过200位的非负整数，没有多余的前导0。</p>
<p>输出：一行，即相加后的结果。结果里不能有多余的前导0，即如果结果是342，那么就不能输出为0342。</p>
<p>本题思路很简单，用数组模拟加法运算的过程，其中有几点可以有效的使代码更为清晰：</p>
<p>1：将数字按位存入数组时，要倒着存入，如一个数为1234567，则存入数组时应为7,6,5,4,3,2,1。这样是为了方便两个数相加的时候每一位对准每一位，就算位数不同也无需额外考虑。</p>
<p>2:当加法循环退出的时候，千万要确保此时的进位已经算进去了，所以我们将进位的值放到下一位里。</p>
<p>3：去除前导0时只需从目前所在的这个位置（即进位所在的位置开始），每遇到一个0就往下一位，直到首位不为0为止。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">int a[201]=&#123;0&#125;;</span><br><span class="line">int b[201]=&#123;0&#125;;</span><br><span class="line">int c[202]=&#123;0&#125;;</span><br><span class="line">char s1[201];</span><br><span class="line">char s2[201];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    gets(s1);</span><br><span class="line">    gets(s2);</span><br><span class="line">    int i,jinwei=0;</span><br><span class="line">    int len1=strlen(s1);</span><br><span class="line">    int len2=strlen(s2);</span><br><span class="line">    for(i=1;i&lt;=len1;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i]=s1[len1-i]-48;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=1;i&lt;=len2;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i]=s2[len2-i]-48;</span><br><span class="line">    &#125;</span><br><span class="line">    int max;</span><br><span class="line">    if(len1&gt;len2)max=len1;</span><br><span class="line">    else max=len2;</span><br><span class="line">    for(i=1;i&lt;=max;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c[i]=a[i]+b[i]+jinwei;</span><br><span class="line">        jinwei=c[i]/10;</span><br><span class="line">        c[i]%=10;</span><br><span class="line">    &#125;</span><br><span class="line">    c[i]=jinwei;</span><br><span class="line">    if(c[i]==0)i--;</span><br><span class="line">    for(;i&gt;=1;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d&quot;,c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 高精度 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[三色球问题 ]]></title>
      <url>/2020/02/26/%E4%B8%89%E8%89%B2%E7%90%83%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>题目：若一个口袋中放有a个红的,b个白的和c个黒的，问从中任取n个共有多少种不同的颜色搭配？<br>输入：<br>多组数据，每组一行，a,b,c,n,都不大于100</p>
<p>输出：<br>每个答案一行<br>思路：此题由于数据规模较小，于是考虑暴力枚举，初次枚举采用的是三层循环，后发现时间会超出限制<br>经过思考，通过红色球数,白色球数,红色球数,n四个数之间的关系，可缩减一次循环。</p>
<p>code：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,c,n;</span><br><span class="line">    while(scanf(&quot;%d %d %d %d&quot;,&amp;a,&amp;b,&amp;c,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        int i,j,sum = 0;</span><br><span class="line">        for(i=0;i&lt;=a;i++)</span><br><span class="line">            for(j=0;j&lt;=b;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(n - i - j &lt; = c &amp;&amp; (n - i - j &gt; = 0))sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        printf(&quot;%d\n&quot;,sum);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[模拟法不模拟]]></title>
      <url>/2020/02/17/%E6%A8%A1%E6%8B%9F%E6%B3%95%E4%B8%8D%E6%A8%A1%E6%8B%9F/</url>
      <content type="html"><![CDATA[<h1 id="拒绝傻瓜模拟"><a href="#拒绝傻瓜模拟" class="headerlink" title="拒绝傻瓜模拟"></a>拒绝傻瓜模拟</h1><p>发现自己对模拟这种最基础的解题方法使用的出了点问题，模拟的本意应是按题意直接编写程序，而我<br>却把模拟使用成了，从问题的起始，一直往后推到结束，这种思路在一些题上是正确的，<br>但是在一些题目上会发现中间的过程过于的复杂，用程序来模拟不现实，此时就应该考虑从大局上来思考<br>问题。</p>
<p>eg：<a href="https://codeforces.com/contest/1304/problem/C" target="_blank" rel="noopener">https://codeforces.com/contest/1304/problem/C</a></p>
<p>此题我能想到的解法便是从头开始推，每次都能满足条件且更接近下个顾客的舒适温度，类似与贪心的<br>思想，但仔细想来根本实现不了，中间可执行的操作太多了，每一分钟可有3种操作。这时候，我们不妨<br>从大体上来看，我们将一段时间温度可以调控到的温度设为一个区间，当顾客的舒适温度区间与能调控<br>的区间有相交的话，便能满足条件。</p>
<p>附代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long ll;</span><br><span class="line">const int maxn=1e5+50;</span><br><span class="line">struct customers&#123;   </span><br><span class="line">   ll t,l,r;</span><br><span class="line">  &#125;s[150];</span><br><span class="line">int main()</span><br><span class="line">&#123;    ll t;    scanf(&quot;%lld&quot;,&amp;t);</span><br><span class="line">     while(t--)</span><br><span class="line">     &#123;     </span><br><span class="line">        ll n,m,ans=0,left,right,flag=0;</span><br><span class="line">        scanf(&quot;%lld%lld&quot;,&amp;n,&amp;m);</span><br><span class="line">        for(int i=0;i&lt;n;i++)    </span><br><span class="line">          scanf(&quot;%lld%lld%lld&quot;,&amp;s[i].t,&amp;s[i].l,&amp;s[i].r);         </span><br><span class="line">          left=right=m;     </span><br><span class="line">          for(int i=0;i&lt;n;i++)</span><br><span class="line">         &#123;        </span><br><span class="line">            ll x=s[i].t-ans;  </span><br><span class="line">            left-=x;     </span><br><span class="line">            right+=x;</span><br><span class="line">            if(right&lt;s[i].l||left&gt;s[i].r)</span><br><span class="line">            &#123;               </span><br><span class="line">               flag=1;   </span><br><span class="line">                break;    </span><br><span class="line">            &#125;   </span><br><span class="line">            if(left&lt;s[i].l)</span><br><span class="line">            left=s[i].l;         </span><br><span class="line">            if(right&gt;s[i].r) right=s[i].r;  </span><br><span class="line">              ans=s[i].t;   </span><br><span class="line">            &#125;   </span><br><span class="line">            if(flag)         puts(&quot;NO&quot;);</span><br><span class="line">            else puts(&quot;Yes&quot;);   </span><br><span class="line">     &#125;   </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++的string]]></title>
      <url>/2020/02/17/C-%E7%9A%84string/</url>
      <content type="html"><![CDATA[<h1 id="论string的重要性"><a href="#论string的重要性" class="headerlink" title="论string的重要性"></a>论string的重要性</h1><p>初次知道string时并没有将它放在心上，我觉得使用字符数组就够了，这让我在算法竞赛中吃了大亏。</p>
<h2 id="使用string的优点"><a href="#使用string的优点" class="headerlink" title="使用string的优点"></a>使用string的优点</h2><p>1：快捷，所有的操作都无需再用复杂的cstring函数库，可直接使用&gt;,&lt;,==,=等符号</p>
<p>2：可直接利用sort使string数组按字典序从小到大排序，也可自定义规则</p>
<p>3：在某些题目上可与map相关联使用会有出其不意的效果。</p>
<p>4：不必担心内存是否足够</p>
<p><img src="https://img-blog.csdn.net/20160825125138703" alt=""></p>
<p>eg：<a href="https://atcoder.jp/contests/abc155/tasks/abc155_c" target="_blank" rel="noopener">https://atcoder.jp/contests/abc155/tasks/abc155_c</a></p>
<p>Problem Statement</p>
<p>We have N<br> voting papers. The<br>i<br>-th vote<br>(<br>1<br>≤<br>i<br>≤<br>N<br>)<br> has the string<br>S<br>i<br> written on it.</p>
<p>Print all strings that are written on the most number of votes, in lexicographical order.</p>
<p>Constraints<br>1<br>≤<br>N<br>≤<br>2<br>×<br>10<br>5<br>S<br>i</p>
<p>(<br>1<br>≤<br>i<br>≤<br>N<br>)<br> are strings consisting of lowercase English letters.<br>The length of<br>S<br>i</p>
<p>(<br>1<br>≤<br>i<br>≤<br>N<br>)<br> is between<br>1<br> and<br>10<br> (inclusive).</p>
<p>Input<br>Input is given from Standard Input in the following format:</p>
<p>N</p>
<p>S<br>1</p>
<p>:</p>
<p>S<br>N</p>
<p>Output</p>
<p>Print all strings in question in lexicographical order.<br>附代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#define INF 0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">string s[200005];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int n,i;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(i=0; i&lt;n; i++)</span><br><span class="line">        cin&gt;&gt;s[i];</span><br><span class="line">    sort(s,s+n);</span><br><span class="line">    int m=1,cnt=1;</span><br><span class="line">    for(i=1; i&lt;n; i++) &#123;</span><br><span class="line">        if(s[i]==(s[i-1]))</span><br><span class="line">            cnt++;</span><br><span class="line">        else</span><br><span class="line">            cnt=1;</span><br><span class="line">        m=max(cnt,m);</span><br><span class="line">    &#125;</span><br><span class="line">    cnt=1;</span><br><span class="line">    if(m==1)</span><br><span class="line">        cout&lt;&lt;s[0]&lt;&lt;endl;</span><br><span class="line">    for(i=1; i&lt;n; i++) &#123;</span><br><span class="line">        if(s[i]==(s[i-1]))</span><br><span class="line">            cnt++;</span><br><span class="line">        else</span><br><span class="line">            cnt=1;</span><br><span class="line">        if(cnt==m)</span><br><span class="line">            cout&lt;&lt;s[i]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[基数排序Or贪心]]></title>
      <url>/2020/02/03/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8FOr%E8%B4%AA%E5%BF%83/</url>
      <content type="html"><![CDATA[<h1 id="基数排序中的贪心思想"><a href="#基数排序中的贪心思想" class="headerlink" title="基数排序中的贪心思想"></a>基数排序中的贪心思想</h1><p>什么是基数排序？先来看看它的实现：从个位到最高位依次排序一次，到最后的时候该数组有序。<br>我们可以这么理解，一个数 = 个位+十位<em>10+百位</em>100+千位*1000…当比较大小时如果我们这样去想，<br>我们先保证个位的有序度，再保证十位的有序度，再保证百位的有序度…依次往后延伸，这样在最后<br>整个数组都会是有序的。贪心算法是局部最优带来整体最优，基数排序这里也一样，从局部的个位有序，<br>十位有序，百位有序，一直到整体有序。<br> 附上C语言代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">void radiosort(int arr[],int n)</span><br><span class="line">&#123;</span><br><span class="line">    int max = arr[0];</span><br><span class="line">    int i;</span><br><span class="line">    for(i=1;i&lt;n;i++)</span><br><span class="line">        if(arr[i]&gt;max)max=arr[i];</span><br><span class="line">    int num = 1;///计算最大值是几位数。</span><br><span class="line">    while(max/10&gt;0)///这样不用对0再讨论</span><br><span class="line">    &#123;</span><br><span class="line">        num++;</span><br><span class="line">        max/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    int bucket[10][20]=&#123;0&#125;;</span><br><span class="line">    ///进行每一趟的排序，从个位数开始排</span><br><span class="line">    for( i = 1 ;i&lt;=num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        for(int j=0;j&lt;n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            int index=(arr[j]/(int)pow(10,i-1))%10;</span><br><span class="line">            for(int k = 0; k &lt; 20; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(bucket[index][k] == 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    bucket[index][k] = arr[j];</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        ///合并放入原数组,此处放回的规则应该是先进先出，后进后出</span><br><span class="line">        int t=0;</span><br><span class="line">        for(int j=0;j&lt;10;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int k = 0; k &lt; 20; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                if(bucket[j][k] != 0)</span><br><span class="line">                &#123;</span><br><span class="line">                    arr[t++]=bucket[j][k];</span><br><span class="line">                    bucket[j][k]=0;</span><br><span class="line">                &#125;</span><br><span class="line">                else break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    int arr[n];</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        scanf(&quot;%d&quot;,&amp;arr[i]);</span><br><span class="line">    radiosort(arr,n);</span><br><span class="line">    for(int i=0;i&lt;n;i++)</span><br><span class="line">        printf(&quot;%d &quot;,arr[i]);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有关尺取法的深度思考]]></title>
      <url>/2020/01/16/%E6%9C%89%E5%85%B3%E5%B0%BA%E5%8F%96%E6%B3%95%E7%9A%84%E6%B7%B1%E5%BA%A6%E6%80%9D%E8%80%83/</url>
      <content type="html"><![CDATA[<p>题目：<br>链接：<a href="https://ac.nowcoder.com/acm/contest/3570/B" target="_blank" rel="noopener">https://ac.nowcoder.com/acm/contest/3570/B</a><br>来源：牛客网</p>
<p>“一刀建林流泪，两刀马云都得跪。”摆在你面前的一长条切糕，你想尝到切糕里面所有的果仁，什么核桃呀，杏仁呀，巴旦木呀…但因为切糕很贵，你要选取一段连续的切糕，使得你能吃到这份切糕里所有的果仁，切记切糕贵，所以要选取最短的长度并且要包含所有的果仁，这里的果仁可以简单的看做a果仁，b果仁，c果仁….，输出能包含所有果仁的最短长度。换句话说出现的果仁都要出现在你所选的区间里面，输出这个区间的最短长度。</p>
<p>输入描述:<br>第一行包含整数n(1≤n≤100 000)——切糕的长度。<br>第二行包含长度为n的字符串，它由英文字母表中的大写字母和小写字母组成。<br>输出描述:<br>输出一个整数，表示最小选取的长度。</p>
<p>本人之前对尺取法的理解很是浅显，只知道先扩大右端点，再改变左端点。但对于具体的思路很难想到。</p>
<p>关键：将区间一直改变，让它一直满足题目所给的要求，但是让区间不在改变的条件很关键，本题的这个关键就是左端点的字母在左端点以后都没有出现过。（是左端点以后而不是选择的区间里面，因为会出现如abbcccccabc的情况）</p>
<p>设满足题意即只要能让所有的字母出现至少一次的条件是a，该区间最短为b。<br>我们首先将区间左右端点都设为0，扩大右端点，当所有字母都出现后停止扩大，b即为该区间长度，此时右端点有可能在总区间的各个位置，然后我们扩大左端点，从现在的左端点位置进行判断，如果这个左端点在选择的区间中出现了不止一次，那么直接扩大左端点，无需其他任何操作。如果这个左端点只出现了一次，我们假设去掉它，再扩大右端点，如果在此时的右端点以后的各个字母已经没有该个被删去的字母，那么最优解已经找到；如果在此时的右端点以后的各个字母还有该个被删去的左端点，那么现在的区间即为【被删去的左端点+1，右端点后的下一个该字母】，这时，我们判断这个新区间与原来那个最短区间b的大小，选择最优解。此后将以上过程循环，直到删去左端点时右端点以后找不到该字母。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n,temp=0,i,ans;char s[100010];int a[200];</span><br><span class="line">    memset(a,0,sizeof(a));</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    scanf(&quot;%s&quot;,s);</span><br><span class="line">    for(i=0;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">      a[s[i]]=1;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=65;i&lt;=122;i++)</span><br><span class="line">    if(a[i]) temp++;</span><br><span class="line">	memset(a,0,sizeof(a));</span><br><span class="line">    int l=0,r=0,now=1;ans=n+1;</span><br><span class="line">	a[s[l]]=1;</span><br><span class="line">	while(1)</span><br><span class="line">	 &#123;</span><br><span class="line">		 while(r&lt;n-1)</span><br><span class="line">		 &#123;</span><br><span class="line">		   if(now==temp) break;</span><br><span class="line">		   r++;</span><br><span class="line">		   if(!a[s[r]]) &#123;now++;&#125;</span><br><span class="line">		   a[s[r]]++;</span><br><span class="line"></span><br><span class="line">		 &#125;</span><br><span class="line">		 if(now&lt;temp) break;//左边的端点去后，在之后再也找不到了。</span><br><span class="line">		 if(r-l+1&lt;ans) ans=r-l+1;//ans等于选择的区间长度，最大为n</span><br><span class="line">		 if((--a[s[l]])==0) now--;//从左端点开始判断其是否在选择的区间中只出现了1次</span><br><span class="line">		 l++;</span><br><span class="line">	 &#125;</span><br><span class="line">    printf(&quot;%d\n&quot;,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[倍增的思想]]></title>
      <url>/2019/12/24/%E5%80%8D%E5%A2%9E%E7%9A%84%E6%80%9D%E6%83%B3/</url>
      <content type="html"><![CDATA[<p>题目：P1909 买铅笔<br>P老师需要去商店买n支铅笔作为小朋友们参加NOIP的礼物。她发现商店一共有 33种包装的铅笔，不同包装内的铅笔数量有可能不同，价格也有可能不同。为了公平起 见，P老师决定只买同一种包装的铅笔。</p>
<p>商店不允许将铅笔的包装拆开，因此P老师可能需要购买超过nn支铅笔才够给小朋 友们发礼物。</p>
<p>现在P老师想知道，在商店每种包装的数量都足够的情况下，要买够至少nn支铅笔最少需要花费多少钱。</p>
<p>输入格式<br>第一行包含一个正整数nn，表示需要的铅笔数量。</p>
<p>接下来三行，每行用22个正整数描述一种包装的铅笔：其中第11个整数表示这种 包装内铅笔的数量，第22个整数表示这种包装的价格。</p>
<p>保证所有的77个数都是不超过1000010000的正整数。<br>此题是一个简单的模拟，可运用倍增的思想，能大幅度减少运算时间。</p>
<pre><code class="&gt;">#include&lt;cstdio&gt;
    using namespace std;
    int i,j,k,n,m,w,ans;
    int main()
    {
        scanf(&quot;%d&quot;,&amp;n);
        for(i=0;i&lt;3;i++){
            scanf(&quot;%d%d&quot;,&amp;j,&amp;k);m=j;w=k;//输入并存下初始的价格与数量
            while(j&lt;n){j&lt;&lt;=1;k&lt;&lt;=1;}//价格与数量不断*2直到数量大于n
            while(j&gt;n){j-=m;k-=w;}//*2有可能导致买太多了，减去一些
            while(j&lt;n){j+=m;k+=w;}//减去之后又可能太少了，加上一些
            //其实就是大幅度地上调，然后做一些微调
            if(k&lt;ans||ans==0)ans=k;//判断是否是最小花费
        }
        printf(&quot;%d\n&quot;,ans);
        return 0;//输出并返回
    }</code></pre>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[由于未初始化导致的本地运行和oj运行答案不一致]]></title>
      <url>/2019/11/19/%E7%94%B1%E4%BA%8E%E6%9C%AA%E5%88%9D%E5%A7%8B%E5%8C%96%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9C%AC%E5%9C%B0%E8%BF%90%E8%A1%8C%E5%92%8Coj%E8%BF%90%E8%A1%8C%E7%AD%94%E6%A1%88%E4%B8%8D%E4%B8%80%E8%87%B4/</url>
      <content type="html"><![CDATA[<p>title: ‘[由于未初始化导致的本地运行和oj运行答案不一致]’<br>date: 2019-11-19 17:08:22<br>tags: 算法</p>
<p>题目：本题要求实现一个函数，用下列公式求cos的近似值，精确到最后一项的绝对值小于e：<br>cos(x)=x0/0!−x2/2!+x4/4!−x6/6!+⋯<br>函数接口定义：<br>double funcos( double e, double x );<br>其中用户传入的参数为误差上限e和自变量x；函数funcos应返回用给定公式计算出来、并且满足误差要求的cos的近似值。输入输出均在双精度范围内。<br>错误代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">double funcos( double e, double x )</span><br><span class="line">&#123;</span><br><span class="line">    double s=0,t;</span><br><span class="line">    int i=0,j,flag=1;</span><br><span class="line">    while(fabs(t)&gt;=e)</span><br><span class="line">    &#123;</span><br><span class="line">        t=pow(x,i);</span><br><span class="line">        for(j=1;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            t/=j;</span><br><span class="line">        &#125;</span><br><span class="line">        s+=t*flag;</span><br><span class="line">        flag=-flag;</span><br><span class="line">        i+=2;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double e, x;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%lf %lf&quot;, &amp;e, &amp;x);</span><br><span class="line">    printf(&quot;cos(%.2f) = %.6f\n&quot;, x, funcos(e, x));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正确代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">double funcos( double e, double x )</span><br><span class="line">&#123;</span><br><span class="line">    double s=0,t=0;</span><br><span class="line">    int i=0,j,flag=1;</span><br><span class="line">    while(fabs(t)&gt;=e)</span><br><span class="line">    &#123;</span><br><span class="line">        t=pow(x,i);</span><br><span class="line">        for(j=1;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            t/=j;</span><br><span class="line">        &#125;</span><br><span class="line">        s+=t*flag;</span><br><span class="line">        flag=-flag;</span><br><span class="line">        i+=2;</span><br><span class="line">    &#125;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    double e, x;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%lf %lf&quot;, &amp;e, &amp;x);</span><br><span class="line">    printf(&quot;cos(%.2f) = %.6f\n&quot;, x, funcos(e, x));</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：第一次错误代码再本地运行时能输出正确答案，当在oj上运行时却输出0.000000.<br>而第二次与第一次的区别仅仅是将t赋值为0，第一次未赋值，在本地能输出是因为巧合，刚好t的值<br>能进入循环，而在oj上却没有这种巧合，所以直接连循环都没有进入，直接输出s的初始值0.00000。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[除数，判断俩个数字的各个数字是否有重复的]]></title>
      <url>/2019/11/11/%E9%99%A4%E6%95%B0%EF%BC%8C%E5%88%A4%E6%96%AD%E4%BF%A9%E4%B8%AA%E6%95%B0%E5%AD%97%E7%9A%84%E5%90%84%E4%B8%AA%E6%95%B0%E5%AD%97%E6%98%AF%E5%90%A6%E6%9C%89%E9%87%8D%E5%A4%8D%E7%9A%84/</url>
      <content type="html"><![CDATA[<p>title: ‘[除数，判断俩个数字的各个数字是否有重复的]’<br>date: 2019-11-11 20:39:26<br>tags: 算法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int is(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">    int a[10];</span><br><span class="line">    int i=0,s=0;</span><br><span class="line">    for(i=0;i&lt;10;i++)a[i]=0;//给数组初始化数值，很重要，一开始没有对就是因为未初始化。</span><br><span class="line">    for(i=0;i&lt;5;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[x%10]=1;</span><br><span class="line">        a[y%10]=1;</span><br><span class="line">        x/=10;y/=10;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i=0;i&lt;10;i++)s+=a[i];</span><br><span class="line">    if(s==10)return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line"></span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=1234;i&lt;98765;i++)&#123;</span><br><span class="line">        if(is(i,i*n)==1)printf(&quot;%d/%d=%d\n&quot;,i*n,i,n);</span><br><span class="line">        if(i*n&gt;100000)break;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[有关字符串比较函数的拓展]]></title>
      <url>/2019/11/10/%E6%9C%89%E5%85%B3%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0%E7%9A%84%E6%8B%93%E5%B1%95/</url>
      <content type="html"><![CDATA[<p>title: ‘[有关字符串比较函数的拓展的思考]’<br>date: 2019-11-10 15:52:48<br>tags: 算法<br>题目：如果一个字符串可以由某个长度为k的字符串重复多次得到，则称该串以k为周期。例如，abc<br>abc以3为周期（注意，它也以6为周期）。<br>    输入一个长度不超过80的字符串，输出其最小周期。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">int bijiao(char s1[],int a,int b,char s2[],int c,int d)</span><br><span class="line">&#123;</span><br><span class="line">      int i,j;</span><br><span class="line">      for(i=a,j=c;i&lt;=b,j&lt;=d;i++,j++)</span><br><span class="line">      &#123;</span><br><span class="line">          if (s1[i]&lt;s2[j]||s1[i]&gt;s2[j])</span><br><span class="line">                return 0;</span><br><span class="line">      &#125;</span><br><span class="line">      return 1;</span><br><span class="line">&#125;</span><br><span class="line">字符串比较函数，比较函数是否相同，此处不能直接用函数库里的比较字符串函数，因为这个</span><br><span class="line">需要在一个字符串中比较其子字符串。</span><br></pre></td></tr></table></figure>
<p>作用：在一个字符串内部比较其不同的子字符串是否相同，而不是选取两个不同字符串进行比较。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[对于多组输入且每个输入对应一个输出的结果]]></title>
      <url>/2019/11/08/%E5%AF%B9%E4%BA%8E%E5%A4%9A%E7%BB%84%E8%BE%93%E5%85%A5%E4%B8%94%E6%AF%8F%E4%B8%AA%E8%BE%93%E5%85%A5%E5%AF%B9%E5%BA%94%E4%B8%80%E4%B8%AA%E8%BE%93%E5%87%BA%E7%9A%84%E7%BB%93%E6%9E%9C/</url>
      <content type="html"><![CDATA[<p>title: ‘[对于多组输入且每个输入对应一个输出的结果]’<br>date: 2019-11-08 11:13:38<br>tags: 算法</p>
<p>题目：有多组输入(不超过1000组)，每组输入只有1行，包含两个整数l和r(1&lt;=l&lt;=r&lt;=100000)，<br>表示区间范围。对于一个数字n，如果它是偶数则n=n/2，否则n=n*3+1。对于一个区间[l,r]中的<br>数字不停的使用如上操作，直到其等于1为止，问所需操作次数最多的一个数需要多少次操作？”<br>输出：最多的次数为y。<br>每组输入对应输出一行“Case #x: y”，x表示第几组数数据（从1开始编号），y表示结果。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;//算数教室1</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,max=0,j=1;</span><br><span class="line">    while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!=EOF)&#123;</span><br><span class="line">        for(int i=a;i&lt;=b;i++)&#123;</span><br><span class="line">            int flag=0,temp=i;</span><br><span class="line">            while(temp!=1)&#123;</span><br><span class="line">                if(temp%2==0)temp/=2;//偶数</span><br><span class="line">                else temp=temp*3+1;//奇数</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            if(flag&gt;max)max=flag;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;Case #%d: %d\n&quot;,j++,max);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">#include&lt;stdio.h&gt;//算数教室2</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int a,b,k=1,max;</span><br><span class="line">    int tab[100001];</span><br><span class="line">    for(int i=1;i&lt;=100000;i++)&#123;</span><br><span class="line">            int flag=0,temp=i;</span><br><span class="line">            while(temp!=1)&#123;</span><br><span class="line">                if(temp%2==0)temp/=2;//偶数</span><br><span class="line">                else temp=temp*3+1;//奇数</span><br><span class="line">                flag++;</span><br><span class="line">            &#125;</span><br><span class="line">            tab[i]=flag;</span><br><span class="line">    &#125;</span><br><span class="line">    while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!=EOF)&#123;</span><br><span class="line">            max=0;</span><br><span class="line">            for(int j=a;j&lt;=b;j++)</span><br><span class="line">                if(tab[j]&gt;max)max=tab[j];</span><br><span class="line">            printf(&quot;Case #%d: %d\n&quot;,k++,max);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一次的代码显示时间超限，改进后的第二个代码就没有这个问题了；<br>第二次改进的思路：首先将1到100000的每一个数字所对应的次数算出来，存入一个对应大小的数组<br>其中数字为数组的下标，数组存的值即为每个数字对应的运算次数，然后再根据题目的输入输出，查表<br>求出输入的每一个数字所对应的结果，再根据题目所给的要求将这些值进行运算求解。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[字符串相关题目]]></title>
      <url>/2019/11/04/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E5%85%B3%E9%A2%98%E7%9B%AE/</url>
      <content type="html"><![CDATA[<p>title: ‘[字符串相关题目]’<br>date: 2019-11-04 22:14:55<br>tags:<br>                               第一块<br>题目：题目描述<br>编写一程序，用于统计从键盘输入的字符串中的元音字母（a，A，e，E，i，I，o，O，u，U）的个数。<br>输入<br>每行输入一字符串，串长不超过255。<br>输出<br>输出对应字符串中元音字母的个数。<br>样例输入 Copy<br>abcio<br>efgaeio<br>ak akkkksd<br>样例输出 Copy<br>3<br>5<br>2<br>（一开始对题目的输入输出要求理解错误，认为是先输入一堆数据后统一输出，如果这道题像我这样<br>理解的话，则输入应该为一个二维数组，每一行是一个字符串，一行一行的进行计算）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    char ch;int sum;</span><br><span class="line">    while(scanf(&quot;%c&quot; , &amp;ch) != EOF)/*一直输入直到题目所给文件的末尾，如果手动输入则用</span><br><span class="line">    ctrl+z手动结束*/</span><br><span class="line">    &#123;</span><br><span class="line">         if(ch==&apos;a&apos;||ch==&apos;A&apos;||ch==&apos;e&apos;||ch==&apos;E&apos;||ch==&apos;i&apos;||ch==&apos;I&apos;||ch==&apos;o&apos;||ch==&apos;O&apos;||ch==&apos;U&apos;||ch==&apos;u&apos;)</span><br><span class="line">                sum++;</span><br><span class="line">         if(ch == &apos;\n&apos;)&#123;printf(&quot;%d\n&quot; , sum);sum=0;&#125;//sum记得在每一行的开始清零。</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>第二块</code></pre><p>scanf(%s):遇回车和空格结束。<br>gets()；遇空格才结束。<br>当输入为：a  b  c  d时</p>
<figure class="highlight plain"><figcaption><span>c[100];</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">while(scanf(&quot;%s&quot;,c)!=EOF)&#123;</span><br><span class="line">    printf(&quot;%s&quot;,c);</span><br><span class="line">&#125;输出为abcd。</span><br><span class="line">char c[100];</span><br><span class="line">  while(gets(c)!=EOF)&#123;</span><br><span class="line">      printf(&quot;%s&quot;,c);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>  输出为a  b  c  d。<br>                               第三块<br> 对于输入一个值然后将其转化为另一个值，且不是用一个特殊的递归表达式将它计算出来，此时可<br> 以定义一个常量数组，然后每个输入有在该常量数组里的对应的序号，然后用其序号输出。<br> 例题：<br> 把手放在键盘上时，稍不注意就会移动错一位，这样，Q会变成W，输入一个错位后敲出的字符串，<br> 输出打字员本来想打的字符串。输入保证合法，如输入中不会出现 A 。<br>   样例输入：<br>   O S, GOMR YPFSU/<br>   样例输出：<br>   I AM FINE TODAY.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">char s[] =&#123;  &quot;`1234567890-=QWERTYUIOP[]\ASDFGHJKL;&apos;ZXCVBNM,./&quot; &#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">             int i ,c;</span><br><span class="line">             while((c=getchar())!=EOF)&#123;</span><br><span class="line">                   for (i=1; s[i]&amp;&amp; s[i]!=c;i++);//找错位之后的字符在常量表达表中的位置</span><br><span class="line">                   if(s[i])putchar(s[i-1]);//如果找到，则输出它的前一个字符</span><br><span class="line">                   else putchar(c);</span><br><span class="line">             &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[水仙花数]]></title>
      <url>/2019/10/31/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0/</url>
      <content type="html"><![CDATA[<p>title: “水仙花数一直没有正确输出的原因”<br>date: 2019-10-31 11:39:01<br>tags:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">     int i,s,a,b;</span><br><span class="line">     for(i=100;i&lt;1000;i++)&#123;</span><br><span class="line">         b=i;</span><br><span class="line">         s=0;//当循环嵌套的时候，在内层循环的开始都应该让判断条件初始化。</span><br><span class="line">         while(b)&#123;</span><br><span class="line">            a=b%10;</span><br><span class="line">            //printf(&quot;a=%d&quot;,a);</span><br><span class="line">            s=s+a*a*a;</span><br><span class="line">            b=b/10;</span><br><span class="line">            //printf(&quot;b=%d&quot;,b);</span><br><span class="line">         &#125;</span><br><span class="line">         //printf(&quot;s=%d\n&quot;,s);</span><br><span class="line">         if(s==i)&#123;</span><br><span class="line">         printf(&quot;%d\n&quot;,i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[“第一条”]]></title>
      <url>/2019/10/30/%E2%80%9C%E7%AC%AC%E4%B8%80%E6%9D%A1%E2%80%9D/</url>
      <content type="html"><![CDATA[<p>title: “第一条”<br>date: 2019-10-30 22:12:54<br>tags:</p>
<p> 这是我的第一条博客，在这里 先记录下由斌哥堂哥分享的有关整数求每个位上数的代码。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main (void)</span><br><span class="line">&#123;</span><br><span class="line">	long long int n;</span><br><span class="line">	int i = 0, a[1000], j = 0, t = 0;</span><br><span class="line">	scanf (&quot;%I64d&quot;,&amp;n);</span><br><span class="line">	if(n==0)</span><br><span class="line">	  printf(&quot;0 &quot;);</span><br><span class="line">	while (n)</span><br><span class="line">	&#123;</span><br><span class="line">		a[j++] = n % 10;</span><br><span class="line">		n /= 10;</span><br><span class="line">	&#125;</span><br><span class="line">	for (i = j - 1; i &gt;= 0; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		printf (&quot;%d,&quot;,a[i]);/*将一个整数一个个的通过对10取余和除等于10，依次得到整数的</span><br><span class="line">                       最后一位数字，将其存入数组，当需要时通过数组的下标一个个取出*</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2019/10/30/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
